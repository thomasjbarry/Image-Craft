/* The MIT License (MIT)

 Copyright (c) 2014 Thomas James Barry, Zachary Y. Gateley, Kenneth Drew Gonzales

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.
 */
package tzk.image.ui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;

/**
 *
 * @author Drew
 */
public class Easel extends javax.swing.JPanel {

    /**
     * Creates new form Easel
     */
    public Easel() {
        initComponents();
    }

    public Easel(ImageCraft iC) {
        imageCraft = iC;
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     * @param args
     */
    public static void main(String[] args) {

    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 585, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 345, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        // finds out if the user clicked the right box, then sets
        // the vertical, horizontal, or coner bools to true.
        if (evt.getX() > width - 10
                && evt.getY() > (height - 10) / 2
                && evt.getY() < (height - 10) / 2 + 10) {
            //right/horizontal
            horizontal = true;
            System.out.println("horizon");
        } else if (evt.getY() > height - 10
                && evt.getX() > (width - 10) / 2
                && evt.getX() < (width - 10) / 2 + 10) {
            //bottom/vertical
            vertical = true;
            System.out.println("vertica");

        } else if (evt.getY() > height - 10
                && evt.getX() > width - 10) {
            //corner
            corner = true;
            System.out.println("corner");
        }
    }//GEN-LAST:event_formMousePressed

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
      /*
        In each, I resize the drawingarea1 and the easel
        repaint, then revalidate, then set the dragging booleans
        to false
        */
        
        if (horizontal) {
            imageCraft.drawingArea1.increaseSize(evt.getX() - width , 0);
            this.increaseSize(evt.getX()  - width , 0);
            System.out.println(horizontal);
        } else if (vertical) {
            imageCraft.drawingArea1.increaseSize(0, evt.getY() - height );
            this.increaseSize(0 , evt.getY()  - height);
            System.out.println(vertical);
        } else if (corner) {
            imageCraft.drawingArea1.increaseSize(evt.getX() - width, evt.getY() - height);
            this.increaseSize( evt.getX() -width, evt.getY() - height);
            System.out.println(corner);
        }
        horizontal = false;
        vertical = false;
        corner = false;
    }//GEN-LAST:event_formMouseReleased

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);

        width = this.getWidth();
        height = this.getHeight();

        g.setColor(Color.BLUE);
        g.fillRect(width - 10, (height - 10) / 2, 10, 10);//horizontal resizer
        g.fillRect(width - 10, height - 10, 10, 10);//corner rezier
        g.fillRect((width - 10) / 2, height - 10, 10, 10); //vertical resizer
    }

    //Used to increase Easel size
    public void increaseSize(int x, int y) {

        this.setPreferredSize(new Dimension(
                (int) this.getPreferredSize().getWidth() + x,
                (int) this.getPreferredSize().getHeight() + y));
        this.revalidate();
        this.repaint();
    }

    public ImageCraft imageCraft;
    public int height, width;
    private boolean corner, vertical, horizontal;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
